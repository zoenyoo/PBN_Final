family="binomial" (link="logit"))
summary(gapMod1)
gap_test <- glm(lm311 ~ pop + mdn_inc + med_rent + workers + PCT_f + PCT_wht + maj_wht + PCT_blk + maj_blk + PCT_asn + PCT_na + PCT_pi + PCT_oth + PCT_mlt + PCT_hsp + PCT_car + PCT_trn + PCT_bik + PCT_wlk + PCT_wfh + PCT_own + PCT_pov + PCT_chld + all311 + m311,
data = dat %>% st_drop_geometry() %>% filter(hin==1),
family="binomial" (link="logit"))
gap_test <- glm(lm311 ~ pop + mdn_inc + med_rent + workers + PCT_f + PCT_wht + maj_wht + PCT_blk + maj_blk + PCT_asn + PCT_na + PCT_pi + PCT_oth + PCT_mlt + PCT_hsp + PCT_car + PCT_trn + PCT_bik + PCT_wlk + PCT_wfh + PCT_own + PCT_pov + PCT_chld,
data = dat %>% st_drop_geometry() %>% filter(hin==1),
family="binomial" (link="logit"))
step(gap_test, direction="backward")
View(data)
gapMod2 <- glm(formula = lm311 ~ pop + mdn_inc + med_rent + PCT_blk + maj_blk + PCT_na +
PCT_pi + PCT_oth + PCT_hsp + PCT_car + PCT_bik + PCT_own +
PCT_pov + PCT_chld, family = binomial(link = "logit"),
data = dat %>% st_drop_geometry() %>% filter(hin==1))
summary(gapMod2)
cor.test(data$med_rent,data$mdn_inc)
gapMod1 <- glm(lm311 ~ med_rent + maj_blk + PCT_bik + PCT_own,
data=dat %>% st_drop_geometry() %>% filter(hin==1),
family="binomial" (link="logit"))
summary(gapMod2)
summary(gapMod1)
cor.test(data$med_rent,data$PCT_pov)
gapMod1 <- glm(lm311 ~ med_rent + maj_blk + PCT_bik + PCT_own + PCT_pov,
data=dat %>% st_drop_geometry() %>% filter(hin==1),
family="binomial" (link="logit"))
summary(gapMod1)
gapMod1 <- glm(lm311 ~ maj_blk + PCT_bik + PCT_own,
data=dat %>% st_drop_geometry() %>% filter(hin==1),
family="binomial" (link="logit"))
summary(gapMod1)
data.frame(100*(exp(coef(gapMod1)))-1) %>%
kable()
knitr::opts_chunk$set(echo = TRUE)
#install.packages("corrplot")
library(dplyr);library(ggplot2);library(Hmisc);library(stargazer); library(htmlTable);library(kableExtra);library (gmodels);library(MASS);library(vcd);library(gridExtra);library(showtext);library(xtable);library(car);library(sf);library(sfnetworks); library(tidycensus);library(tidygraph);library(ggcorrplot);library(mlogit);library(AER);library(Hmisc); library(corrplot)
options(scipen=0)
setwd("G:/My Drive/GrSchool/CPLN 505 Planning by Numbers/PBN_Final")
palette <- c("#10142A", "#47E9B9", "#F55D60", "#71EA48", "#C148EA", "#EAC148" )
viridisPalette <- c("#440154", "#73D055", "#F55D60", "#238A8D", "#FDE725")
#palette5 <- c("#324376", "#586ba4", "#f5dd90", "#ee964b", "#f95738")
palette4 <- c("#324376", "#586ba4", "#ee964b", "#f95738")
palette5 <- c("#FFFDFC", "#FFD5C8", "#FFC6B5", "#FF8061", "#F95738")
palette2 <- c("#324376", "#f95738")
get_acs_csv <- function(yr1, variableList, nameList) {
acs1 <- get_acs(geography = "block group",
year = yr1,
variables = variableList,
geometry = TRUE,
state  = "PA",
county = "Philadelphia",
output = "wide"
)
acs_full <- acs1 %>% dplyr:: select(!ends_with("M")) #include this line to remove margins of error
names(acs_full) <- c("GEOID","NAME", nameList,"geometry")
#acs_full <- acs_full[order(acs_full$GEOID),]
#write.csv(acs_full, file=paste(deparse(substitute(variableList)), yr1,"-",yr2, ".csv")) #include this line to export a csv
return(acs_full)
}
variableList <- c("B01001_001", #total population
"B01001_002", #total male
"B01001_026", #total female
"B02001_002", #white alone
"B02001_003", #black alone
"B02001_004", #AmIn/AlNative alone
"B02001_005", #Asian alone
"B02001_006", #Native hawaiian/PI alone
"B02001_007", #some other race alone
"B02001_008", #two plus races
"B03003_003", #total Hispanic or Latino
"B05009_001", #under 18 years B05009_001 for 2010, B09001_001 for 2019
"B15001_001", #18 years + B15001_001 for 2010, B09021_001 for 2019
"B11003_001", #families with children under 18
"B08301_001", #workers
"B08301_002", #means of transportation to work: car
"B08301_010", #means of transportation to work: public transit
"B08301_018", #means of transportation to work: bicycle
"B08301_019", #means of transportation to work: walked
"B08301_021", #means of transportation to work: wfh
"B19013_001", #median income
"B17001_002", #Income in the past 12 months below poverty level
"B17001_031", #Income in the past 12 months at or above poverty level
"B25064_001", #median gross rent
"B25003_002", #owner occupied
"B25003_003" #renter occupied
)
nameList <- c("pop",
"male",
"fem",
"white",
"black",
"native_am",
"asian",
"nh_pi",
"other",
"multi",
"hisp_lat",
"Under_18",
"Above_18",
"fam_child",
"workers",
"Car",
"Transit",
"Bicycle",
"Walking",
"WFH",
"mdn_inc",
"blw_pov",
"abv_pov",
"med_rent",
"own",
"rent")
acs_data <- get_acs_csv(2019,variableList, nameList)
# add percentages
acs_data <- acs_data %>%
mutate(PCT_m = male/pop,
PCT_f = fem/pop,
PCT_wht = white/pop,
PCT_blk = black/pop,
PCT_na = native_am/pop,
PCT_asn = asian/pop,
PCT_pi = nh_pi/pop,
PCT_oth = other/pop,
PCT_mlt = multi/pop,
PCT_hsp = hisp_lat/pop,
PCT_chld = Under_18/pop,
PCT_car = Car/workers,
PCT_trn = Transit/workers,
PCT_bik = Bicycle/workers,
PCT_wlk = Walking/workers,
PCT_wfh = WFH/workers,
PCT_pov = blw_pov/pop,
PCT_own = own/pop,
PCT_rent = rent/pop,
maj_wht = if_else(PCT_wht > 0.50, 1, 0),
maj_blk = if_else(PCT_blk > 0.50, 1, 0))
acs_data <- st_transform(acs_data,crs=4326)
#this line writes the data to a shapefile
st_write(acs_data,"./data/acs_bg.shp", driver="ESRI Shapefile", append=FALSE)
get_acs_csv <- function(yr1, variableList, nameList) {
acs1 <- get_acs(geography = "tract",
year = yr1,
variables = variableList,
geometry = TRUE,
state  = "PA",
county = "Philadelphia",
output = "wide"
)
acs_full <- acs1 %>% dplyr:: select(!ends_with("M")) #include this line to remove margins of error
names(acs_full) <- c("GEOID","NAME", nameList,"geometry")
#acs_full <- acs_full[order(acs_full$GEOID),]
#write.csv(acs_full, file=paste(deparse(substitute(variableList)), yr1,"-",yr2, ".csv")) #include this line to export a csv
return(acs_full)
}
all311 <- read_sf("./data/311_2019_allSelected.shp")
View(acs_data)
all311 <- read_sf("./data/311_2019_allSelected.shp")
m311 <- all311 %>% filter(service_na %in%
c("Abandoned Vehicle",
"Complaint (Streets)",
"Dangerous Sidewalk",
"Line Striping",
"Other (Streets)",
"Right of Way Unit",
"Right of Way",
"Salting",
"Stop Sign Repair",
"Street Defect",
"Street Paving",
"Street Trees",
"Traffic (Other)",
"Traffic Signal Emergency"))
dat_bg <- read_sf("./data/ip_acs_join_bg.shp")
dat_bg <- read_sf("./data/ip_acs_join_bg.shp")
get_acs_csv <- function(yr1, variableList, nameList) {
acs1 <- get_acs(geography = "tract",
year = yr1,
variables = variableList,
geometry = TRUE,
state  = "PA",
county = "Philadelphia",
output = "wide"
)
acs_full <- acs1 %>% dplyr:: select(!ends_with("M")) #include this line to remove margins of error
names(acs_full) <- c("GEOID","NAME", nameList,"geometry")
#acs_full <- acs_full[order(acs_full$GEOID),]
#write.csv(acs_full, file=paste(deparse(substitute(variableList)), yr1,"-",yr2, ".csv")) #include this line to export a csv
return(acs_full)
}
variableList <- c("B01001_001", #total population
"B01001_002", #total male
"B01001_026", #total female
"B02001_002", #white alone
"B02001_003", #black alone
"B02001_004", #AmIn/AlNative alone
"B02001_005", #Asian alone
"B02001_006", #Native hawaiian/PI alone
"B02001_007", #some other race alone
"B02001_008", #two plus races
"B03003_003", #total Hispanic or Latino
"B05009_001", #under 18 years B05009_001 for 2010, B09001_001 for 2019
"B15001_001", #18 years + B15001_001 for 2010, B09021_001 for 2019
"B11003_001", #families with children under 18
"B08301_001", #workers
"B08301_002", #means of transportation to work: car
"B08301_010", #means of transportation to work: public transit
"B08301_018", #means of transportation to work: bicycle
"B08301_019", #means of transportation to work: walked
"B08301_021", #means of transportation to work: wfh
"B19013_001", #median income
"B17001_002", #Income in the past 12 months below poverty level
"B17001_031", #Income in the past 12 months at or above poverty level
"B25064_001", #median gross rent
"B25003_002", #owner occupied
"B25003_003" #renter occupied
)
nameList <- c("pop",
"male",
"fem",
"white",
"black",
"native_am",
"asian",
"nh_pi",
"other",
"multi",
"hisp_lat",
"Under_18",
"Above_18",
"fam_child",
"workers",
"Car",
"Transit",
"Bicycle",
"Walking",
"WFH",
"mdn_inc",
"blw_pov",
"abv_pov",
"med_rent",
"own",
"rent")
acs_data <- get_acs_csv(2019,variableList, nameList)
# add percentages
acs_data <- acs_data %>%
mutate(PCT_m = male/pop,
PCT_f = fem/pop,
PCT_wht = white/pop,
PCT_blk = black/pop,
PCT_na = native_am/pop,
PCT_asn = asian/pop,
PCT_pi = nh_pi/pop,
PCT_oth = other/pop,
PCT_mlt = multi/pop,
PCT_hsp = hisp_lat/pop,
PCT_fam = Under_18/pop,
PCT_car = Car/workers,
PCT_trn = Transit/workers,
PCT_bik = Bicycle/workers,
PCT_wlk = Walking/workers,
PCT_wfh = WFH/workers,
PCT_pov = blw_pov/pop,
PCT_own = own/pop,
PCT_rent = rent/pop,
maj_wht = if_else(PCT_wht > 0.50, 1, 0),
maj_blk = if_else(PCT_blk > 0.50, 1, 0))
acs_data <- st_transform(acs_data,crs=4326)
#this line writes the data to a shapefile
st_write(acs_data,"./data/acs.shp", driver="ESRI Shapefile", append=FALSE)
dat <- read_sf("./data/ip_acs_join.shp")
dat <- select(dat, -c(TARGET_FID, Id, Input_FID, OBJECTID, NODE_ID))
dat <- dat %>%
mutate(lm311 = if_else(m311 < 4, 1, 0),
logm311 = log(m311),
gap = if_else(m311<4 & hin==1, 1,0)
)
dat_bg <- read_sf("./data/ip_acs_join_bg.shp")
dat_bg <- select(dat_bg, -c(TARGET_FID, Id, Input_FID, OBJECTID, NODE_ID))
dat_bg <- dat_bg %>%
mutate(lm311 = if_else(m311 < 4, 1, 0),
logm311 = log(m311),
gap = if_else(m311<4 & hin==1, 1,0)
)
dat <- read_sf("./data/ip_acs_join.shp")
dat <- select(dat, -c(TARGET_FID, Id, Input_FID, OBJECTID, NODE_ID))
dat <- dat %>%
mutate(lm311 = if_else(m311 < 4, 1, 0),
logm311 = log(m311),
gap = if_else(m311<4 & hin==1, 1,0)
)
numericVars_bg <-
select_if(dat %>% st_drop_geometry(), is.numeric) %>%
select(Join_Count, all311, m311, hin, hin_c, crsh_c, fatal, fatal_c, inj, inj_c, pop, starts_with("PCT")) %>%
na.omit()
numericVars_bg <-
select_if(dat_bg %>% st_drop_geometry(), is.numeric) %>%
select(Join_Count, all311, m311, hin, hin_c, crsh_c, fatal, fatal_c, inj, inj_c, pop, starts_with("PCT")) %>%
na.omit()
View(numericVars_bg)
ggcorrplot(  #correlation plot
round(cor(numericVars_bg), 1),
p.mat = cor_pmat(numericVars_bg),
show.diag = TRUE,
lab = TRUE,
colors = c("#08519c", "white", "#FA342A"),
type="lower",
insig = "blank") +
labs(title = "Correlations of Demographic Data, HIN Data, and 311 Data",
subtitle = "Intersection Polygons, Philadelphia, PA")
ggcorrplot(  #correlation plot
round(cor(numericVars_bg), 1),
p.mat = cor_pmat(numericVars_bg),
show.diag = TRUE,
lab = TRUE,
colors = c("#08519c", "white", "#FA342A"),
type="lower",
insig = "blank") +
labs(title = "Correlations of Demographic Data, HIN Data, and 311 Data",
subtitle = "Intersection Polygons, Philadelphia, PA")
acs1 <- get_acs(geography = "block group",
year = yr1,
variables = variableList,
geometry = TRUE,
state  = "PA",
county = "Philadelphia",
output = "wide"
)
get_acs_csv <- function(yr1, variableList, nameList) {
acs1 <- get_acs(geography = "block group",
year = yr1,
variables = variableList,
geometry = TRUE,
state  = "PA",
county = "Philadelphia",
output = "wide"
)
acs_full <- acs1 %>% dplyr:: select(!ends_with("M")) #include this line to remove margins of error
names(acs_full) <- c("GEOID","NAME", nameList,"geometry")
#acs_full <- acs_full[order(acs_full$GEOID),]
#write.csv(acs_full, file=paste(deparse(substitute(variableList)), yr1,"-",yr2, ".csv")) #include this line to export a csv
return(acs_full)
}
variableList <- c("B01001_001", #total population
"B01001_002", #total male
"B01001_026", #total female
"B02001_002", #white alone
"B02001_003", #black alone
"B02001_004", #AmIn/AlNative alone
"B02001_005", #Asian alone
"B02001_006", #Native hawaiian/PI alone
"B02001_007", #some other race alone
"B02001_008", #two plus races
"B03003_003", #total Hispanic or Latino
"B05009_001", #under 18 years B05009_001 for 2010, B09001_001 for 2019
"B15001_001", #18 years + B15001_001 for 2010, B09021_001 for 2019
"B11003_001", #families with children under 18
"B08301_001", #workers
"B08301_002", #means of transportation to work: car
"B08301_010", #means of transportation to work: public transit
"B08301_018", #means of transportation to work: bicycle
"B08301_019", #means of transportation to work: walked
"B08301_021", #means of transportation to work: wfh
"B19013_001", #median income
"B17001_002", #Income in the past 12 months below poverty level
"B17001_031", #Income in the past 12 months at or above poverty level
"B25064_001", #median gross rent
"B25003_002", #owner occupied
"B25003_003" #renter occupied
)
nameList <- c("pop",
"male",
"fem",
"white",
"black",
"native_am",
"asian",
"nh_pi",
"other",
"multi",
"hisp_lat",
"Under_18",
"Above_18",
"fam_child",
"workers",
"Car",
"Transit",
"Bicycle",
"Walking",
"WFH",
"mdn_inc",
"blw_pov",
"abv_pov",
"med_rent",
"own",
"rent")
acs_data <- get_acs_csv(2019,variableList, nameList)
acs_data <- get_acs_csv(2019,variableList, nameList)
# add percentages
acs_data <- acs_data %>%
mutate(PCT_m = male/pop,
PCT_f = fem/pop,
PCT_wht = white/pop,
PCT_blk = black/pop,
PCT_na = native_am/pop,
PCT_asn = asian/pop,
PCT_pi = nh_pi/pop,
PCT_oth = other/pop,
PCT_mlt = multi/pop,
PCT_hsp = hisp_lat/pop,
PCT_fam = Under_18/pop,
PCT_car = Car/workers,
PCT_trn = Transit/workers,
PCT_bik = Bicycle/workers,
PCT_wlk = Walking/workers,
PCT_wfh = WFH/workers,
PCT_pov = blw_pov/pop,
PCT_own = own/pop,
PCT_rent = rent/pop,
maj_wht = if_else(PCT_wht > 0.50, 1, 0),
maj_blk = if_else(PCT_blk > 0.50, 1, 0))
acs_data <- st_transform(acs_data,crs=4326)
#this line writes the data to a shapefile
st_write(acs_data,"./data/acs_bg.shp", driver="ESRI Shapefile", append=FALSE)
dat <- read_sf("./data/ip_acs_join.shp")
dat <- read_sf("./data/ip_acs_join.shp")
dat <- select(dat, -c(TARGET_FID, Id, Input_FID, OBJECTID, NODE_ID))
dat <- dat %>%
mutate(lm311 = if_else(m311 < 4, 1, 0),
logm311 = log(m311),
gap = if_else(m311<4 & hin==1, 1,0)
)
dat_bg <- read_sf("./data/ip_acs_join_bg.shp")
dat_bg <- select(dat_bg, -c(TARGET_FID, Id, Input_FID, OBJECTID, NODE_ID))
dat_bg <- dat_bg %>%
mutate(lm311 = if_else(m311 < 4, 1, 0),
logm311 = log(m311),
gap = if_else(m311<4 & hin==1, 1,0)
)
dat_bg <- read_sf("./data/ip_acs_join_bg.shp")
dat_bg <- read_sf("./data/ip_acs_join_bg.shp")
dat_bg <- read_sf("./data/ip_acs_join_bg.shp")
dat_bg <- read_sf("./data/ip_acs_join_bg.shp")
dat_bg <- select(dat_bg, -c(TARGET_FID, Id, Input_FID, OBJECTID, NODE_ID))
dat_bg <- dat_bg %>%
mutate(lm311 = if_else(m311 < 4, 1, 0),
logm311 = log(m311),
gap = if_else(m311<4 & hin==1, 1,0)
)
View(all311)
View(dat)
df <- tibble(
mobility = c("Abandoned Vehicle",
"Complaint (Streets)",
"Dangerous Sidewalk",
"Line Striping",
"Other (Streets)",
"Right of Way Unit",
"Right of Way",
"Salting",
"Stop Sign Repair",
"Street Defect",
"Street Paving",
"Street Trees",
"Traffic (Other)",
"Traffic Signal Emergency"))
kable(df)
kable(df,
title="Cases Classified as Mobility Cases")
kable(df,
title="311 Cases Classified as Mobility Cases")
kable(df,
caption="311 Cases Classified as Mobility Cases")
hinMod3 <- glm(hin ~ crsh_c + inj_c + fatal_c,
data=dat_bg %>% st_drop_geometry(),
family="binomial" (link="logit"))
summary(hinMod3)
hinModb <- glm(hin ~ crsh_c + inj_c + fatal_c,
data=dat_bg %>% st_drop_geometry(),
family="binomial" (link="logit"))
#model just using crash and injury/fatal data
hinMod3 <- glm(hin ~ crsh_c + inj_c + fatal_c,
data=dat %>% st_drop_geometry(),
family="binomial" (link="logit"))
summary(hinMod3)
summary(hinModb)
# our honed model
l311Mod1 <- glm(lm311 ~ med_rent + maj_blk + PCT_car + PCT_bik + PCT_own + PCT_pov,
data=dat %>% st_drop_geometry(),
family="binomial" (link="logit"))
l311Modb <- glm(lm311 ~ med_rent + maj_blk + PCT_car + PCT_bik + PCT_own + PCT_pov,
data=dat_bg %>% st_drop_geometry(),
family="binomial" (link="logit"))
summary(l311Mod1)
summary(l311Modb)
dat1 %>% summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)))
dat1 <- filter(dat, m311>3 & hin==1) #high mobility cases and in the hin
dat1 %>% summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)))
dat1 <- dat %>% st_drop_geometry() %>% filter(m311>3 & hin==1) #high mobility cases and in the hin
dat1 %>% summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)))
dat1 %>% summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE))) %>% stargazer(type="html", title="Summary Table of Continuous Variables",
single.row = TRUE, digits=1)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("corrplot")
library(dplyr);library(ggplot2);library(Hmisc);library(stargazer); library(htmlTable);library(kableExtra);library (gmodels);library(MASS);library(vcd);library(gridExtra);library(showtext);library(xtable);library(car);library(sf);library(sfnetworks); library(tidycensus);library(tidygraph);library(ggcorrplot);library(mlogit);library(AER);library(Hmisc); library(corrplot)
options(scipen=0)
#setwd("G:/My Drive/GrSchool/CPLN 505 Planning by Numbers/PBN_Final")
palette <- c("#10142A", "#47E9B9", "#F55D60", "#71EA48", "#C148EA", "#EAC148" )
viridisPalette <- c("#440154", "#73D055", "#F55D60", "#238A8D", "#FDE725")
#palette5 <- c("#324376", "#586ba4", "#f5dd90", "#ee964b", "#f95738")
palette4 <- c("#324376", "#586ba4", "#ee964b", "#f95738")
palette5 <- c("#FFFDFC", "#FFD5C8", "#FFC6B5", "#FF8061", "#F95738")
palette2 <- c("#324376", "#f95738")
dat <- read_sf("./data/ip_acs_join.shp")
